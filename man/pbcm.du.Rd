% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pbcm.du.R
\name{pbcm.du}
\alias{pbcm.du}
\title{Data-uninformed Parametric Bootstrap Cross-fitting}
\usage{
pbcm.du(fun1, fun2, genfun1, genfun2, reps, args1 = NULL, args2 = NULL,
  genargs1 = NULL, genargs2 = NULL, print_genargs = TRUE,
  verbose = TRUE, GoFname = "GoF")
}
\arguments{
\item{fun1}{First modelling function}

\item{fun2}{Second modelling function}

\item{genfun1}{Generator function for first model}

\item{genfun2}{Generator function for second model}

\item{reps}{Number of Monte Carlo repetitions}

\item{args1}{List of arguments passed to \code{fun1}}

\item{args2}{List of arguments passed to \code{fun2}}

\item{genargs1}{List of arguments passed to \code{genfun1}}

\item{genargs2}{List of arguments passed to \code{genfun2}}

\item{print_genargs}{Whether the generator argument values should be included in output (see Details)}

\item{verbose}{If \code{TRUE}, a progress bar is printed to the console and warnings are issued}

\item{GoFname}{Name of the element returned by \code{fun1} and \code{fun2} holding the goodness of fit; see Details}
}
\value{
A data frame in long format with the following columns:
\describe{
\item{\code{rep}}{Monte Carlo repetition number}
\item{\code{generator}}{Generating model}
\item{\code{GoF1}}{Goodness of fit of model 1}
\item{\code{GoF2}}{Goodness of fit of model 2}
\item{\code{DeltaGoF}}{Equals \code{GoF1 - GoF2}}
}
In addition to these columns, if \code{print_genargs == TRUE}, each argument in the lists \code{genargs1} and \code{genargs2} is included as a column of its own, with the argument's name prefixed by \code{"genargs1_"} or \code{"genargs2_"}.
}
\description{
The data-uninformed Parametric Bootstrap Cross-fitting Method (PBCM) generates synthetic data from two models of a phenomenon with given model parameter values, and then cross-fits the models to these data. The result is two distributions of the goodness of fit metric \eqn{\Delta GoF = GoF_1 - GoF_2}, where \eqn{GoF_1} is the fit of model 1 and \eqn{GoF_2} the fit of model 2.
}
\details{
Functions \code{fun1} and \code{fun2} must take an argument named \code{data} in addition to any arguments specified in \code{args1} and \code{args2}; this is used to pass the synthetic data generated by \code{genfun1} and \code{genfun2}. Moreover, these functions must return a list with at least one element carrying the goodness of fit; the name of this element may be specified through the \code{GoFname} argument, by default the string \code{"GoF"} is assumed.
}
\examples{
x <- seq(from=0, to=1, length.out=100)
mockdata <- data.frame(x=x, y=x + rnorm(100, 0, 0.5))

myfitfun <- function(data, p) {
  res <- nls(y~a*x^p, data, start=list(a=1.1))
  list(a=coef(res), GoF=deviance(res))
}

mygenfun <- function(a, p) { 
  x <- seq(from=0, to=1, length.out=100)
  y <- a*x^p + rnorm(100, 0, 0.5)
  data.frame(x=x, y=y)
}

pbcm.du(fun1=myfitfun, fun2=myfitfun, genfun1=mygenfun, genfun2=mygenfun, 
        reps=20, args1=list(p=1), args2=list(p=2), 
        genargs1=list(a=1.1, p=1), genargs2=list(a=1.1, p=2))

sweep <- lapply(X=seq(from=0.5, to=1.5, by=0.1),
                FUN=function(X) {
                  pbcm.du(fun1=myfitfun, fun2=myfitfun, genfun1=mygenfun,
                          genfun2=mygenfun, reps=20,
                          args1=list(p=1), args2=list(p=2), 
                          genargs1=list(a=X, p=1), genargs2=list(a=X, p=2))
                })

sweep <- do.call(rbind, sweep)

sweep$parameter <- ifelse(is.na(sweep$genargs1_a), sweep$genargs2_a, sweep$genargs1_a)

\dontrun{
  library(ggplot2)
  g <- ggplot(sweep, aes(x=DeltaGoF, fill=generator)) + geom_density(alpha=0.5) 
  g <- g + facet_wrap(.~parameter)
  print(g)
}
}
\references{
Wagenmakers, E.-J., Ratcliff, R., Gomez, P. & Iverson, G. J. (2004) Assessing model mimicry using the parametric bootstrap. \emph{Journal of Mathematical Psychology}, 48(1), 28â€“50. \url{https://doi.org/10.1016/j.jmp.2003.11.004}
}
\author{
Henri Kauhanen
}
